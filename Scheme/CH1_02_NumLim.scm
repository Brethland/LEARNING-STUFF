#lang racket

; This is an exercise program in <SICP> CH1.
; Mainly about Newton iteration and continued fractions.
; Author : Brethland, Early 2019.

; (define (f g)
;  (g 2))
;  (f f)
(define (abs a)
    (cond ((< a 0) (- a))
          (else a)))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
        (< (abs (- v1 v2))
            tolerance))
    (define (try guess)
        (display guess)
        (newline)
        (let ((next (f guess)))
            (if (close-enough? guess next)
                next
                (try next))))
    (try first-guess))
(define (averge-dump f) (lambda (x) (averge x (f x))))
; (define (averge a b)
;     (/ (+ a b) 2))
; (fixed-point (averge-dump (lambda (x) (/ (log 1000) (log x)))) 2.0)
; (define (cont-frac n d k)
;     (define (rec i)
;         (if (= k i)
;             (/ (n i) (d i))
;             (/ (n i)
;                 (+ (d i) (rec (+ i 1))))))
;     (rec 1))
(define (cont-frac n d k)
    (define (iter i result)
        (if (= 0 i)
         result
         (iter (- i 1) (/ (n i) (- (d i) result)))))
    (iter (- k 1) (/ (n k) (d k))))
(define (tan-cf x k)
        (define (d i)
            (- (* 2 i) 1))
        (define (rec i)
        (define (n x)
            (cond ((= i 1) x)
                  (else (* x x))))
            (if (= k i)
                (/ (n x) (d i))
                (/ (n x) (- (d i) (rec (+ i 1))))))
        (rec 1))
(tan-cf (/ 3.1415926 4) 100)