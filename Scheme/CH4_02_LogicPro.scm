; This is an exercise program in <SICP> CH4.
; Mainly about logical programming language design.
; Author : Brethland. Late 2019.

(rule (replace ?x ?y)
    (and (job ?x ?job1)
         (job ?y ?job2)
         (or (same? ?job1 ?job2)
             (can-do-job ?job1 ?job2))))
(and (rule ?x ?y)
    (salary ?x ?s1)
    (salary ?y ?s2)
    (replace ?x ?y)
    (lisp-value < ?s1 ?s2))
(rule (big-wheel ?x ?dep)
    (and (job ?x (?dep . ?type))
         (not (supervisior ?x ?y))))
(meeting ?x (Friday ?y))
(rule (meeting-time ?person ?day-and-time)
    (or (meeting whole-company ?day-and-time)
         (and (job ?person (?dep . ?type))
              (meeting ?dep ?day-and-time))))
(rule (live-near-unique ?person1 ?person2)
;     ())
(rule (last-pair (?x) (?x)))
(rule (last-pair (?u . ?v) (?x)) 
        (last-pair ?v (?x)))
(rule (father ?s ?f) 
        (or (son ?f ?s) 
            (and (son ?w ?s) 
                (wife ?f ?w))))
  
(rule (grandson ?g ?s) 
        (and (father ?s ?f) 
            (father ?f ?g)))
(rule (reverse `() `()))
(rule (reverse (?u . ?v) ?y)
    (append-to-form ?v ?u ?y))
(rule (end-in-grandson (grandson))) 
(rule (end-in-grandson (?x . ?rest)) 
       (end-in-grandson ?rest)) 
(rule ((grandson) ?x ?y) 
       (grandson ?x ?y)) 
(rule ((great . ?rel) ?x ?y) 
       (and (end-in-grandson ?rel) 
            (son ?x ?z) 
            (?rel ?z ?y)))