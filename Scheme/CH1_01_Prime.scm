#lang racket

; This is an exersice program for <SICP> CH1
; Mainly about Prime Test using Miller_Rabin and fermat_test
; Author : Brethland, Early 2019.

(define (square a) (* a a))
(define (even? a) (= (remainder a 2) 0))
(define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((miller-rabin? base m) 0)
          ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
          (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (miller-rabin? a n)
    (cond ((= a 1) 0)
          ((= a (- n 1) 0))
          ((= (remainder (square a) n) 1) 1)
          (else 0)))
(define (smallest-divisior n)
    (find-divisior n 2))
(define (find-divisior n test-divisior)
    (cond ((> (square test-divisior) n) n)
          ((divides? test-divisior n) test-divisior)
          (else (find-divisior n (+ test-divisior 1)))))
(define (divides? a b)
    (= (remainder b a) 0))
(define (fermat-test n)
    (define (try-it a)
    (= (expmod a (- n 1) n) a))
    (try-it (+ 1 (random (- n 1)))))
(define (prime? n times)
    (cond ((= times 0) true)
          ((fermat-test n) (prime? n (- times 1)))
          (else false)))
(prime? 561 128)
(prime? 6601 128)
(prime? 1729 128)
(define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (real-time-clock)))
(define (start-prime-test n start-time)
    (if (prime? n)
        (report-prime (- (real-time-clock) start-time))))
(define (report-time elapsed-time)
    (display " *** ")
    (display elapsed-time))
(define (search-for-primes n number)
    (cond ((= number 0) (display " end "))
          ((prime? n 32) (newline) (display n) (search-for-primes (+ n 2) (- number 1)))
          (else (search-for-primes (+ n 2) number))))
(define (timed-search n number start-time)
    (search-for-primes n number)
    (- (current-milliseconds) start-time))
(timed-search 1000001 3 (current-milliseconds))