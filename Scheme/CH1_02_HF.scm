#lang racket

; This is an exercise program in <SICP> CH1.
; Mainly about High-ordered Fuctions.
; Author : Brethland, Early 2019.

(define (square x) (* x x))
(define (inc a) (+ a 1))
(define (product term a next b)
    (if (> a b)
        1
        (* (term a)
            (product term (next a) next b))))
(define (id x) x)
(define (fac x)
    (product id 1 inc x))
(define (even-pi n)
    (cond ((= n 2) n)
          (else (square n))))
(define (plustwo n) (+ n 2))
(define pi
    (* 4
        (/ (* 2 (product square 4 plustwo 20))
            (* 20 (product square 3 plustwo 19)))))
(define (product term a next b)
    (define iter a result)
        (if (> a b)
            result
            (iter (next a) (* (term a) result)))
    (iter a 1))
(define (accumulate combiner null-value term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (combiner (term a) result))))
    (iter a null-value))
(define (filtered-accumulate combiner null-value term a next b filter)
    (define (iter a result)
        (cond (> a b) result
              ((filter (term a)) (iter (next a) (combiner (term a) result)))
              (else (iter (next a) result))))
    (iter a null-value))
; (filtered-accumulate + 0 id a inc b prime?)
; (filtered-accumulate * 1 1 inc (- n 1) gcd?)
(define (gcd? a)
    (cond ((= (gcd a n) 1) #t)
          (else #f)))
(define (next k)
    (+ k 1))
(define (even? n)
    (= (remainder n 2) 0))
(define (sum term a next b)
    (if (> a b)
        0
        (+ (term a)
            (sum term (next a) next b))))
(define (intergral f a b n)
    (define h (/ (- b a) n))
    (define (y k)
        (f (+ a (* k h))))
    (define (factor k)
        (cond ((or (= k 0) (= k n)) 1)
              ((even? k) 2)
              (else 4)))
    (define (term k)
        (* (y k)
            (factor k)))
    (if (not (even? n))
        (display "error")
        (* (/ h 3)
            (sum term 0 next n))))
(define (cube x)
    (* x x x))
(intergral cube 0 1 1000)
(define (sum term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (+ (term a)
                                result))))
    (iter a 0))
; (sum cube 1 next 10)