;;; This is an exercise program in <SICP> CH3.
;;; Mainly about Constraint and Digital Circuit.
;;; Author : Brethland, Late 2019.

(define (or-gate a1 a2 output)
    (define (or-action-procedure)
        (let ((new-value
                (logical-or (get-signal a1) (get-signal a2))))
            (after-delay and-gate-delay
                (lambda ()
                    (set-signal! output new-value)))))
    (add-action! a1 or-action-procedure)
    (add-action! a2 or-action-procedure)
    `ok)
(define (orgate a1 a2 output)
    (let ((d (make-wire))
          (e (make-wire))
          (nand1 (make-wire))
          (nand2 (make-wire))
          (out (make-wire)))
    (and-gate a1 a2 d)
    (and-gate a1 a2 e)
    (invert-gate d nand1)
    (invert-gate e nand2)
    (and-gate nand1 nand2 out)
    (invert-gate out output)
    `ok))
(define (ripple-carry-adder alist blist slist c)
    (let ((len (length alist)))
        (define (iter lenth alist blist slist)
            (cond ((= lenth 1) 
                    (full-adder (car alist) (car blist) (iter (+ lenth 1) (cdr alist) (cdr blist) (cdr slist)) (car slist) c))
                  ((= lenth len) 
                    (define cline (make-wire))
                    (full-adder (car alist) (car blist) 0 (car slist) cline)
                    cline)
                  (else (define cline (make-wire))
                    (full-adder (car alist) (car blist) (iter (+ lenth 1) (cdr alist) (cdr blist) (cdr slist)) (car slist) cline))))
        (iter 1 alist blist slist)))

(define (averager a b c)
    (define mid (make-connecter))
    (define sum (make-connecter))
    (define sumer (adder a b sum))
    (define mider (constant 0.5 mid))
    (define multer (multiplier sum mid c))
    (define (process-new-value)
        (cond ((and (has-value? a) (has-value? b))
                (inform-about-value sumer)
                (inform-about-value multer))
              ((and (has-value? c)
                 (or (has-value? a) (has-value? b)))
                (inform-about-value multer)
                (inform-about-value adder))))
    (define (process-forget-value)
        ((inform-about-no-value sumer)
         (inform-about-no-value multer)
         (process-new-value)))
    (define (me request)
        (cond ((eq? request `I-have-a-value)
               (process-new-value))
              ((eq? request `I-lost-a-value)
               (process-forget-value))
              (else (display "Unknown request -- AVERAGER" request))))
    me)
(define (c- x y)
    (let ((p (make-connecter)))
        (adder p y x)
    p))
(define (c* x y)
    (let ((z (make-connecter)))
        (multiplier x y z)
    z))
(define (c/ x y)
    (let ((p (make-connecter)))
        (multiplier p y x)
    p))
(define (cv val)
    (let ((m (make-connecter)))
        (constant val m)
    m))
