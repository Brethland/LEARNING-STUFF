#lang R5RS

; Thisi is a program implementing Queue Data Structure.
; Some code comes from <SICP>.
; Author : Brethland, Late 2019.

(define (set-car! set val)
    (set! (car set) val))
(define (set-cdr! set val)
    (set! (cdr set) val))
(define (make-queue) (cons `() `()))
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (set-front-ptr! queue value) (set-car! queue value))
(define (set-rear-ptr! queue value) (set-cdr! queue value))
(define (front-queue queue)
    (if (empty-queue? queue)
        (display "FRONT called with an empty queue" queue)
        (car (front-ptr queue))))
(define (insert-queue! queue value)
    (let ((new-pair (cons value `())))
        (cond ((empty-queue? queue)
            (set-front-ptr! queue new-pair)
            (set-rear-ptr! queue new-pair)
            queue)
              (else (set-cdr! (rear-ptr queue) new-pair)
                    (set-rear-ptr! queue new-pair)
                    queue))))
(define (delete-queue! queue)
    (cond ((empty-queue? queue)
            (display "DELETE! called with an empty queue" queue))
          (else (set-front-ptr! queue (cdr (front-ptr queue)))
                queue)))
(define (print-queue queue)
    (define (iter que res)
        (cond ((null? que) res)
              (else (cons (car que) (iter (cdr que) res)))))
    (iter (front-ptr queue) `()))
(define (make-queue)
    (let ((front-ptr `())
         ((rear-ptr `())))
        (define (empty-queue?) (null? front-ptr))
        (define (set-front-ptr!)
            (lambda (val)
                (set! front-ptr val)))
        (define (set-rear-ptr!)
            (lambda (val)
                (set! rear-ptr val)))
        (define (front-queue)
            (cond ((empty-queue?)
                    (display "FRONT called with an empty queue"))
                  (else (car front-ptr))))
        (define (insert-queue!)
            (lambda (val)
                (let ((new-pair (cons value `())))
                (cond ((empty-queue?)
                    ((set-front-ptr!) new-pair)
                    ((set-rear-ptr!) new-pair))
                    (else (set-cdr! rear-ptr new-pair)
                            ((set-rear-ptr!) new-pair))))))
        (define (delete-queue!)
            (cond ((empty-queue?)
                    (display "DELETE called with an empty queue"))
                  (else ((set-front-ptr!) (cdr front-ptr)))))
        (define (dispatch m)
            (cond ((eq? m `empty-queue?) (empty-queue?))
                  ((eq? m `front-queue) (front-queue))
                  ((eq? m `insert-queue!) (insert-queue!))
                  ((eq? m `delete-queue!) (delete-queue!))
                  (else (display "ERROR unknown command" m))))
        dispatch))
(define (insert-front! deque value)
    (cond ((empty-queue? deque) (insert-queue! deque))
          (else (let ((new-pair (cons value (front-ptr deque))))
                    (set-front-ptr! deque new-pair)))))
(define (delete-rear! deque)
    (define (find deque lst)
        (cond ((null? (cdr (cdr lst)))
                (set-cdr! lst '())
                (set-rear-ptr! deque lst)
                deque)
              (else
                (find deque (cdr lst)))))
    (cond ((empty-queue? deque)
            (display "DELETE called with an empty deque" deque))
          ((null? (cdr (front-ptr deque)))
            (set-front-ptr! deque `()))
          (else (find deque (front-ptr deque)))))