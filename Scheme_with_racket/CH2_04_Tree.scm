#lang racket

; This is an exercise program in <SICP> CH2.
; Mainly about Tree representation using list.
; Author : Brethland, Early 2019.

; (list 1 (list 2 (list 3 4)))
; (car (cdr (car (cdr (cdr (list 1 3 (list 5 7) 9))))))
; (car (car (list (list 7))))
; (cadadadadadadr (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 (list 7))))))))
(define (reverse lis)
    (define (reverse-cons lis res)
        (if (null? lis)
            res
            (reverse-cons (cdr lis) (cons (car lis) res))))
    (reverse-cons lis `()))
; (define (reverse-tree tree)
;     (cond ((null? tree) `())
;           ((not (pair? tree)) tree)
;           (else (reverse (list (reverse-tree (car tree))
;                                (reverse-tree (cadr tree)))))))
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) 
            (append (cdr list1) 
                    list2))))
(define (reverse-tree tree)
    (define (iter tree res)
        (cond ((null? tree) res)
              (else (iter (cdr tree)
                          (cons (if (pair? (car tree))
                                (reverse-tree (car tree))
                                (car tree)) res)))))
    (iter tree `()))
(define t (list (list 1 2) (list 3 4) 5))
(define (fringe tree)
    (cond ((null? tree) `())
          ((not (pair? tree)) (list tree))
          (else (append (fringe (car tree)) (fringe (cdr tree))))))
; (fringe t)
(define (tree-map f tree)
    (map (lambda (sub-tree) 
        (if (pair? sub-tree)
            (tree-map f sub-tree)
            (f sub-tree)))
            tree))
(define (square x) (* x x))
(define (square-tree tree) (tree-map square tree))
; (square-tree t)
(define (subsets s)
    (if (null? s)
        (list `())
        (let ((rest (subsets (cdr s))))
            (append rest (map (lambda (res) (cons (car s) res)) rest)))))
(subsets (list 1 2 3))