#lang racket

; This is an exercise program in <SICP> CH2.
; Mainly about Rational Computation.
; Author : Brethland, Early 2019.

(define (make-rat a b)
    (define (minimize-rat x y) 
        (let ((g (gcd x y)))
            (cons x y)))
    (cond ((< b 0) (minimize-rat (- a) (- b)))
          ((= b 0) (display "error: denom can't be zero."))
          (else (minimize-rat a b))))
(define (abs a)
    (cond ((< a 0) (- a))
          (else a)))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
        (< (abs (- v1 v2))
            tolerance))
    (define (try guess)
        (display guess)
        (newline)
        (let ((next (f guess)))
            (if (close-enough? guess next)
                next
                (try next))))
    (try first-guess))
(define (average-dump f) (lambda (x) (average x (f x))))
(define (sqrt x)
    (fixed-point (average-dump (lambda (y) (/ x y))) 2.0))
(define (average a b) (/ (+ a b) 2))
(define (square x) (* x x))
(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (display-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))
(define (make-segment a b c d)
    (let ((x (make-point a b))
          (y (make-point c d)))
          (cons x y)))
(define (start-point l) (car l))
(define (end-point l) (cdr l))
(define (mid-point l)
    (make-point (average (x-point (start-point l)) (x-point (end-point l))) 
                (average (y-point (start-point l)) (y-point (end-point l)))))
; (display-point (mid-point (make-segment 1 3 5 7)))
(define (make-rectangle l1 l2)
    (cons l1 l2))
(define (rec-circ m)
    (* 2 (+ (width m)
            (height m))))
(define (rec-area m)
    (* (width m)
        (height m)))
(define (width m) (segment-length (make-segment (x-point (start-point (car m))) 
                                                (y-point (start-point (car m)))
                                                (x-point (start-point (cdr m)))
                                                (y-point (start-point (cdr m))))))
(define (height m) (segment-length (car m)))
(define (segment-length l)
    (sqrt (+ (square (- (x-point (start-point l))
                        (x-point (end-point l))))
             (square (- (y-point (start-point l))
                        (y-point (end-point l)))))))
(rec-circ (make-rectangle (make-segment 1 4 6 4) (make-segment 1 2 6 2)))
(rec-area (make-rectangle (make-segment 1 4 6 4) (make-segment 1 2 6 2)))
; (define (cdr z)
;     (z (lambda (p q) q)))
(define (cons a b)
    (* (expt 2 a)
        (expt 3 b)))
(define (car z)
    (define (iter z result)
        (if (not (= (remainder z 2) 0))
            result
            (iter (/ z 2) (+ result 1))))
    (iter z 0))
(define (cdr z)
    (define (iter z result)
        (if (not (= (remainder z 3) 0))
            result
            (iter (/ z 3) (+ result 1))))
    (iter z 0))
; (car (cons 4 5))
; (cdr (cons 7 6))
